/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.philimones.hds.explorer.installer;

import java.awt.Component;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 *
 * @author paul
 */
public class PanelDatabase extends javax.swing.JPanel implements IPage {

    static final String DRIVER_POSTGRES = "org.postgresql.Driver";
    static final String DIALECT_POSTGRES = "org.hibernate.dialect.PostgreSQL94Dialect";
    static final String DRIVER_MYSQL = "com.mysql.jdbc.Driver";    
    static final String DIALECT_MYSQL = "org.hibernate.dialect.MySQL5InnoDBDialect";
    static final String URL_POSTGRES = "jdbc:postgresql://$HOSTNAME:$PORT/$DATABASE";
    static final String URL_MYSQL = "jdbc:mysql://$HOSTNAME:$PORT/$DATABASE?createDatabaseIfNotExist=true&autoReconnect=true&zeroDateTimeBehavior=convertToNull&useSSL=false";
    
    static final String KEY_DATASOURCE_POOLED = "dataSource.pooled";
    static final String KEY_DATASOURCE_DRIVER = "dataSource.driverClassName";
    static final String KEY_DATASOURCE_DIALECT = "dataSource.dialect";
    static final String KEY_DATASOURCE_USERNAME = "dataSource.username";
    static final String KEY_DATASOURCE_PASSWORD = "dataSource.password";
    static final String KEY_DATASOURCE_URL = "dataSource.url";
    
    /**
     * Creates new form PanelDatabase
     */
    public PanelDatabase() {
        initComponents();
                        
        checkboxesGroup.add(chkMySqlDb);
        checkboxesGroup.add(chkPostgresDb);
    }
    
    private String getUrl() {
        
        if (chkMySqlDb.isSelected()) {
            return createMySqlUrl(txtHostname.getText(), txtDatabase.getText(), txtPort.getText());
        } else {
            return createPostgresUrl(txtHostname.getText(), txtDatabase.getText(), txtPort.getText());
        }
    }
    
    private String createMySqlUrl(String hostname, String database, String port) {
        String url = URL_MYSQL;
        
        url = url.replace("$HOSTNAME", hostname);
        url = url.replace("$DATABASE", database);
        url = url.replace("$PORT", port);
        
        return url;
    }
    
    private String createPostgresUrl(String hostname, String database, String port) {
        String url = URL_POSTGRES;
        
        url = url.replace("$HOSTNAME", hostname);
        url = url.replace("$DATABASE", database);
        url = url.replace("$PORT", port);
        
        return url;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkboxesGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblIcon = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblTitleInfo1 = new javax.swing.JLabel();
        lblTitleInfo2 = new javax.swing.JLabel();
        panelDbms = new javax.swing.JPanel();
        chkMySqlDb = new javax.swing.JRadioButton();
        chkPostgresDb = new javax.swing.JRadioButton();
        panelSettings = new javax.swing.JPanel();
        lblHostname = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        lblDatabase = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblPasswordConfirm = new javax.swing.JLabel();
        txtHostname = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        txtDatabase = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        txtPasswordConfirm = new javax.swing.JPasswordField();
        lblUsername1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(701, 473));
        setPreferredSize(new java.awt.Dimension(701, 473));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hds-icon-1.png"))); // NOI18N

        lblTitle.setFont(new java.awt.Font("Gordita", 1, 16)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitle.setText("Database server settings");
        lblTitle.setToolTipText("");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTitle.setMaximumSize(new java.awt.Dimension(230, 25));
        lblTitle.setMinimumSize(new java.awt.Dimension(230, 25));

        lblTitleInfo1.setText("Choose the database management system that will be used by HDS-Explorer");

        lblTitleInfo2.setText("Specify the host, port and user credentials to access the database server");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIcon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitleInfo2)
                    .addComponent(lblTitleInfo1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lblTitleInfo1)
                        .addGap(0, 0, 0)
                        .addComponent(lblTitleInfo2))
                    .addComponent(lblIcon))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelDbms.setBorder(javax.swing.BorderFactory.createTitledBorder("DBMS Systems"));

        chkMySqlDb.setText("MySQL Database");

        chkPostgresDb.setText("PostgreSQL Database");
        chkPostgresDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPostgresDbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDbmsLayout = new javax.swing.GroupLayout(panelDbms);
        panelDbms.setLayout(panelDbmsLayout);
        panelDbmsLayout.setHorizontalGroup(
            panelDbmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDbmsLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(panelDbmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkPostgresDb)
                    .addComponent(chkMySqlDb))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        panelDbmsLayout.setVerticalGroup(
            panelDbmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDbmsLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(chkMySqlDb)
                .addGap(20, 20, 20)
                .addComponent(chkPostgresDb)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Access settings"));

        lblHostname.setText("Database server hostname:");

        lblPort.setText("Database server port:");

        lblDatabase.setText("Database name:");

        lblPassword.setText("Database password:");

        lblPasswordConfirm.setText("Retype database password:");

        txtHostname.setText("localhost");
        txtHostname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHostnameActionPerformed(evt);
            }
        });

        txtPort.setText("3306");

        txtDatabase.setText("hds_explorer_db");

        lblUsername1.setText("Database username:");

        txtUsername.setText("hds_explorer");

        javax.swing.GroupLayout panelSettingsLayout = new javax.swing.GroupLayout(panelSettings);
        panelSettings.setLayout(panelSettingsLayout);
        panelSettingsLayout.setHorizontalGroup(
            panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelSettingsLayout.createSequentialGroup()
                        .addComponent(lblPasswordConfirm)
                        .addGap(18, 18, 18)
                        .addComponent(txtPasswordConfirm))
                    .addGroup(panelSettingsLayout.createSequentialGroup()
                        .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHostname)
                            .addComponent(lblPort)
                            .addComponent(lblDatabase)
                            .addComponent(lblPassword)
                            .addComponent(lblUsername1))
                        .addGap(16, 16, 16)
                        .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHostname, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        panelSettingsLayout.setVerticalGroup(
            panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHostname)
                    .addComponent(txtHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDatabase)
                    .addComponent(txtDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername1)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPasswordConfirm)
                    .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDbms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelDbms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chkPostgresDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPostgresDbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkPostgresDbActionPerformed

    private void txtHostnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHostnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHostnameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup checkboxesGroup;
    private javax.swing.JRadioButton chkMySqlDb;
    private javax.swing.JRadioButton chkPostgresDb;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDatabase;
    private javax.swing.JLabel lblHostname;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPasswordConfirm;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitleInfo1;
    private javax.swing.JLabel lblTitleInfo2;
    private javax.swing.JLabel lblUsername1;
    private javax.swing.JPanel panelDbms;
    private javax.swing.JPanel panelSettings;
    private javax.swing.JTextField txtDatabase;
    private javax.swing.JTextField txtHostname;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPasswordConfirm;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public ValidationResult validatePage() {
        
        ValidationType type = ValidationType.SUCCESS;
        Component component = null;
        String errorMessage = "";
        
        if (!chkMySqlDb.isSelected() && !chkPostgresDb.isSelected()) {
            errorMessage = "Please select one of database types showed in the left panel";
            type = ValidationType.ERROR;
            component = chkMySqlDb;
            
        } else if (StringUtil.isBlank(txtHostname.getText())) {
            errorMessage = "The hostname cannot be blank";
            type = ValidationType.ERROR;
            component = txtHostname;
            
        } else if (!StringUtil.isInteger(txtPort.getText())) {
            errorMessage = "The port number must be an integer value";
            type = ValidationType.ERROR;
            component = txtPort;
        } else if (StringUtil.isBlank(txtHostname.getText())) {
            errorMessage = "The hostname cannot be blank";
            type = ValidationType.ERROR;
            component = txtHostname;
            
        } else if (StringUtil.isBlank(txtDatabase.getText())) {
            errorMessage = "The database name/schema cannot be blank";
            type = ValidationType.ERROR;
            component = txtDatabase;
            
        } else if (StringUtil.isBlank(txtUsername.getText())) {
            errorMessage = "The username cannot be blank";
            type = ValidationType.ERROR;
            component = txtUsername;
            
        } else if (StringUtil.isBlank(new String(txtPassword.getPassword()))) {
            errorMessage = "The field password cannot be blank";
            type = ValidationType.ERROR;
            component = txtPassword;
            
        } else if (StringUtil.isBlank(new String(txtPasswordConfirm.getPassword()))) {
            errorMessage = "The retyped password cannot be blank";
            type = ValidationType.ERROR;
            component = txtPasswordConfirm;
            
        } else if (!StringUtil.equals(txtPassword.getPassword(), txtPasswordConfirm.getPassword())) {
            errorMessage = "The passwords doesnt match";
            type = ValidationType.ERROR;
            component = txtPasswordConfirm;
        }
        
        
        return new ValidationResult(type, errorMessage, component);
    }

    @Override
    public Map<String, String> exportValues() {
        Map<String,String> map = new LinkedHashMap<>();
        map.put(KEY_DATASOURCE_POOLED, "true");
        map.put(KEY_DATASOURCE_DRIVER, chkMySqlDb.isSelected() ? DRIVER_MYSQL : DRIVER_POSTGRES);
        map.put(KEY_DATASOURCE_DIALECT, chkMySqlDb.isSelected() ? DIALECT_MYSQL : DIALECT_POSTGRES);
        map.put(KEY_DATASOURCE_USERNAME, txtUsername.getText());
        map.put(KEY_DATASOURCE_PASSWORD, new String(txtPassword.getPassword()));
        map.put(KEY_DATASOURCE_URL, getUrl());
        
        return map;
    }
}
